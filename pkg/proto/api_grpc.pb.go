// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: api.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Logs_GetLogs_FullMethodName          = "/api.Logs/GetLogs"
	Logs_GetModules_FullMethodName       = "/api.Logs/GetModules"
	Logs_InitModule_FullMethodName       = "/api.Logs/InitModule"
	Logs_GetAllowedLevels_FullMethodName = "/api.Logs/GetAllowedLevels"
)

// LogsClient is the client API for Logs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsClient interface {
	GetLogs(ctx context.Context, in *LogFilter, opts ...grpc.CallOption) (*LogResp, error)
	GetModules(ctx context.Context, in *ModuleReq, opts ...grpc.CallOption) (*ModuleResp, error)
	InitModule(ctx context.Context, in *InitModuleReq, opts ...grpc.CallOption) (*InitModuleResp, error)
	GetAllowedLevels(ctx context.Context, in *LevelsReq, opts ...grpc.CallOption) (*LevelsResp, error)
}

type logsClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsClient(cc grpc.ClientConnInterface) LogsClient {
	return &logsClient{cc}
}

func (c *logsClient) GetLogs(ctx context.Context, in *LogFilter, opts ...grpc.CallOption) (*LogResp, error) {
	out := new(LogResp)
	err := c.cc.Invoke(ctx, Logs_GetLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsClient) GetModules(ctx context.Context, in *ModuleReq, opts ...grpc.CallOption) (*ModuleResp, error) {
	out := new(ModuleResp)
	err := c.cc.Invoke(ctx, Logs_GetModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsClient) InitModule(ctx context.Context, in *InitModuleReq, opts ...grpc.CallOption) (*InitModuleResp, error) {
	out := new(InitModuleResp)
	err := c.cc.Invoke(ctx, Logs_InitModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsClient) GetAllowedLevels(ctx context.Context, in *LevelsReq, opts ...grpc.CallOption) (*LevelsResp, error) {
	out := new(LevelsResp)
	err := c.cc.Invoke(ctx, Logs_GetAllowedLevels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsServer is the server API for Logs service.
// All implementations must embed UnimplementedLogsServer
// for forward compatibility
type LogsServer interface {
	GetLogs(context.Context, *LogFilter) (*LogResp, error)
	GetModules(context.Context, *ModuleReq) (*ModuleResp, error)
	InitModule(context.Context, *InitModuleReq) (*InitModuleResp, error)
	GetAllowedLevels(context.Context, *LevelsReq) (*LevelsResp, error)
	mustEmbedUnimplementedLogsServer()
}

// UnimplementedLogsServer must be embedded to have forward compatible implementations.
type UnimplementedLogsServer struct {
}

func (UnimplementedLogsServer) GetLogs(context.Context, *LogFilter) (*LogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedLogsServer) GetModules(context.Context, *ModuleReq) (*ModuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModules not implemented")
}
func (UnimplementedLogsServer) InitModule(context.Context, *InitModuleReq) (*InitModuleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitModule not implemented")
}
func (UnimplementedLogsServer) GetAllowedLevels(context.Context, *LevelsReq) (*LevelsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowedLevels not implemented")
}
func (UnimplementedLogsServer) mustEmbedUnimplementedLogsServer() {}

// UnsafeLogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsServer will
// result in compilation errors.
type UnsafeLogsServer interface {
	mustEmbedUnimplementedLogsServer()
}

func RegisterLogsServer(s grpc.ServiceRegistrar, srv LogsServer) {
	s.RegisterService(&Logs_ServiceDesc, srv)
}

func _Logs_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logs_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServer).GetLogs(ctx, req.(*LogFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logs_GetModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServer).GetModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logs_GetModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServer).GetModules(ctx, req.(*ModuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logs_InitModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitModuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServer).InitModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logs_InitModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServer).InitModule(ctx, req.(*InitModuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logs_GetAllowedLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LevelsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServer).GetAllowedLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logs_GetAllowedLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServer).GetAllowedLevels(ctx, req.(*LevelsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Logs_ServiceDesc is the grpc.ServiceDesc for Logs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Logs",
	HandlerType: (*LogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogs",
			Handler:    _Logs_GetLogs_Handler,
		},
		{
			MethodName: "GetModules",
			Handler:    _Logs_GetModules_Handler,
		},
		{
			MethodName: "InitModule",
			Handler:    _Logs_InitModule_Handler,
		},
		{
			MethodName: "GetAllowedLevels",
			Handler:    _Logs_GetAllowedLevels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
